{
  "name": "Variables",
  "icon": "minecraft:paper",
  "category": "pneumaticcraft:programming",
  "advancement": "pneumaticcraft:programmer",
  "pages": [
    {
      "type": "text",
      "text": "$(thing)Variables/$ allow drone programs to store and manipulate block positions (aka coordinates) to provide some advanced drone functionality.$(p)To create or manipulate variables from within a drone program, use the $(l:programming/coordinate_operator)Coordinate Operator/$ and $(l:programming/coordinate)Coordinate/$ widgets, and to run tests on variables, use the $(l:programming/condition_coordinate)Condition: Coordinate/$ widget."
    },
    {
      "type": "text",
      "text": "In the $(l:programming/area)Area/$ widget you can, instead of using a GPS coordinate, use a $(thing)variable/$ name.$(p)These $(thing)variables/$ persist across world reloads, so could be used to create an endless mining program, for example, where the Drone's dig position is tracked by a $(thing)variable/$.$(p)For an old but still relevant tutorial, see $(l:https://www.youtube.com/watch?v=FIjEdD_Yj9Y)this YouTube video by MineMaarten/$."
    },
    {
      "type": "text",
      "text": "While $(thing)variables/$ only store coordinates (an X/Y/Z triple), if you think about it you will realise that you can work with $(thing)integers/$ and $(thing)booleans/$ too. Just use only one axis for integers, and for booleans, define something like '0' = false, and everything else = true. Have fun!"
    },
    {
      "type": "text",
      "title": "Item Variables",
      "text": "On the previous page, we mentioned that variables can only store coordinates. Well, that was a small lie: there is also such a thing as $(thing)item variables/$, which store (you guessed it) an item value. These are created with the $(l:programming/item_assign)Item Assign/$ and $(l:programming/for_each_item)For Each Item/$ widgets, and used by the $(l:programming/item_filter)Item Filter/$ widget."
    },
    {
      "type": "text",
      "title": "Types of Variable",
      "text": "There are three types of variable:$(li)$(thing)Local variables/$: these are stored per-drone and are referenced simply as 'varname'.$(li)$(thing)Global variables/$: these are global to all drones and can be used for sharing data. They are referenced as '#varname' or '%varname' (see following pages).$(li)$(thing)Special Variables/$ can be used to retrieve some metadata about the drone and are referenced as '$varname'."
    },
    {
      "type": "text",
      "anchor": "global",
      "title": "Global Variables",
      "text": "Normal variables are unique per $(l:tools/drone)Drone/$; they can't be shared. $(thing)Global variables/$, however, $(italic)can/$ be shared. This allows Drones to communicate with each other.$(p)Additionally, $(l:tools/gps_tool)GPS Tools/$ can link to and modify them, the $(l:machines/universal_sensor)Universal Sensor/$ can emit a $(#f00)redstone signal/$ based on them, and the $(l:tools/remote)Remote/$ can display and modify them."
    },
    {
      "type": "text",
      "title": "Global Variables (cont.)",
      "text": "$(ttcolor)$(t:Player-global variables were added in PNC:R 3.0.0, MC 1.18.1)There are two types of global variable/$: $(thing)player-global/$ and $(thing)server-global/$.$(li)Player-global variables are prefixed with '#'. These are shared among a player's drones, but private to each player.$(li)Server-global variables are prefixed with '%'. These variables are shared among $(italic)all/$ players on the server.$(p)Note: in earlier versions of the mod only server-global existed, with a prefix of '#'."
    },
    {
      "type": "text",
      "title": "Variable Commands",
      "text": "Several commands exist (usable by any player) to manipulate global variables:$(li)/pncr global_var set <varname> <x> <y> <z>$(li)/pncr global_var set <varname> <item-registry-id>$(li)/pncr global_var get <varname>$(li)/pncr global_var list$(li)/pncr global_var delete <varname>"
    },
    {
      "type": "text",
      "anchor": "special",
      "title": "Special Variables",
      "text": "The following special variables are recognised:$(li)$(thing)$owner_pos/$: the (head) blockpos of the player who owns the $(l:tools/drone)Drone/$, or (0,0,0) if the owner is offline.$(li)$(thing)$drone_pos/$: the blockpos of the drone itself.$(li)$(thing)$player_pos=<name>/$: the (head) blockpos of the player '<name>' (case insensitive), or (0,0,0) for invalid or offline player names."
    },
    {
      "type": "text",
      "anchor": "special",
      "title": "Special Variables (cont.)",
      "text": "$(li)$(thing)$owner_look/$: a vector representing the owning player's facing on each axis; each value will be -1, 0 or 1.$(li)$(thing)$controller_pos/$: the blockpos of the controlling $(l:programming/programmable_controller)Programmable Controller/$ block, or (0,0,0) if the drone is an actual drone, rather than a Programmable Controller."
    },
    {
      "type": "text",
      "anchor": "special",
      "title": "Special Variables (cont.)",
      "text": "Several older variables also exist which remain usable for compatibility reasons (but it's recommended to use the variables on the previous page):$(li)$(thing)$owner/$: an alias for $(thing)$owner_pos/$.$(li)$(thing)$drone/$: gets the blockpos $(italic)above/$ the drone, for historical reasons.$(li)$(thing)$player=<name>/$: an alias for $(thing)$player_pos/$."
    },
    {
      "type": "text",
      "title": "Debugging",
      "text": "Sometimes it's useful to display the value of a variable for debugging purposes. You can display a variable's value in a few ways:$(li)Using the $(l:programming/rename)Rename/$ widget to show the variable as a drone's nameplate$(li)Writing text with the $(l:programming/edit_sign)Edit Sign/$ widget$(li)Using a $(l:tools/remote#label)label/$ in a $(l:tools/remote)Remote/$."
    },
    {
      "type": "text",
      "title": "Debugging (cont.)",
      "text": "To interpolate a variable into text displayed by one of the above methods, use the syntax $(thing)${varname}/$.$(p)Note that the special & global variable prefixes still apply here, so to interpolate a drone's position, you would use $(thing)${$drone_pos}/$, and to interpolate a global variable, you would use $(thing)${#globalvarname}/$ or $(thing)${%globalvarname}/$."
    },
    {
      "type": "text",
      "title": "Debugging (cont.)",
      "text": "You can also display only the X, Y or Z component of the coordinate by suffixing the variable name with $(thing).x/$, $(thing).y/$ or $(thing).z/$ respectively. E.g. to show the drone owner's Y coordinate, use $(thing)${$owner_pos.y}/$.$(p)If the variable is an $(thing)item variable/$, a $(thing).id/$ suffix will get the item's registry ID instead of its display name (which is the default). This is particularly useful for displaying an item on an $(l:machines/aphorism_tile#items)Aphorism Tile/$."
    }
  ]
}
